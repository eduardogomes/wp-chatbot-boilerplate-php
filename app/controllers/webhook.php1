<?php

require_once('vendor/autoload.php');

$require_signature = true;

function uuid(): string
{
  $data = openssl_random_pseudo_bytes(16);
  return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
}

function array_grab(array $array, string $path): mixed {
  $keys = explode('/', $path);
  foreach ($keys as $key) {
    if (!array_key_exists($key, $array)) {
      return null;
    }
    $array = $array[$key];
  }
  return $array;
}

if ($_SERVER["REQUEST_METHOD"] == "GET") {
  $hub_mode = array_key_exists('hub_mode', $_GET) ? $_GET['hub_mode'] : '';
  $hub_challenge = array_key_exists('hub_challenge', $_GET) ? $_GET['hub_challenge'] : '';
  $hub_verify_token = array_key_exists('hub_verify_token', $_GET) ? $_GET['hub_verify_token'] : '';

  if ($hub_mode !== 'subscribe') {
    Env::debugLog('Invalid webhook mode');
    http_response_code(400);
    die(0);
  }
  if ($hub_verify_token !== Env::getVerifyToken()) {
    Env::debugLog('Failed to verify token');
    http_response_code(400);
    die(0);
  }
  Env::debugLog('Webhook subscribed');
  echo($hub_challenge);
  die(0);
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $body = file_get_contents( "php://input" );
  if ($require_signature) {
    if (!array_key_exists('HTTP_X_HUB_SIGNATURE', $_SERVER)) {
      Env::debugLog('X-Hub-Signature header not found');
      http_response_code(400);
      die(0);
    }
    $signature = $_SERVER['HTTP_X_HUB_SIGNATURE'];
    $expected = 'sha1=' . Env::hash($body, Env::getAppSecret(), 'sha1');
    if ($expected !== $signature) {
      Env::debugLog('X-Hub-Signature does not match');
      http_response_code(400);
      die(0);
    }
  }

  // lookup map for values in the webhook payload
  $mapping = [
    'group' => [
      'posts'      => [ 'community' => 'value/community/id', 'verb' => 'value/verb', 'actor' => 'value/from/id', 'target' => 'value/post_id'],
      'comments'   => [ 'community' => 'value/community/id', 'verb' => 'value/verb', 'actor' => 'value/from/id', 'target' => 'value/comment_id'],
      'membership' => [ 'community' => 'value/community/id', 'verb' => 'value/verb', 'actor' => 'value/actor/id', 'target' => 'value/member/id'],
    ],
    'page' => [
      'mention' => [ 'community' => 'value/community/id', 'verb' => 'value/verb', 'actor' => 'value/sender_id', 'target' => 'value/item'],
      'message' => [ 'community' => 'sender/community/id', 'verb' => 'send', 'actor' => 'sender/id', 'target' => 'recipient/id'],
    ],
    'user' => [
      'status' => [ 'community' => 'value/community/id', 'verb' => '', 'actor' => '', 'target' => 'id'],
      'events' => [ 'community' => 'value/community/id', 'verb' => 'value/verb', 'actor' => '', 'target' => 'value/event_id'],
    ],
  ];

  Env::debugLog('Webhook body - ' . $body);
  $data = json_decode($body, true);
  if (array_key_exists('object', $data) && array_key_exists('entry', $data)) {
    $object = $data['object'];
    foreach ($data['entry'] as $entry) {
      $object_id = $entry['id'];
      $timestamp = $entry['time'];
      if (array_key_exists('changes', $entry)) {
        foreach ($entry['changes'] as $item) {
          $field = $item['field'];
          $community_id = array_grab($item, $mapping[$object][$field]['community']);
          $event = new Event(uuid());
          $event->setData('object', $object);
          $event->setData('id', $object_id);
          $event->setData('field', $field);
          $event->setData('verb', array_grab($item, $mapping[$object][$field]['verb']));
          $event->setData('actor', array_grab($item, $mapping[$object][$field]['actor']));
          $event->setData('target', array_grab($item, $mapping[$object][$field]['target']));
          $event->setData('value', $item, true);
          $event->setData('timestamp', $timestamp);
          // fixup actor if status update
          if ($field == 'user' && $field == 'status') {
            $event->setData('actor', $object_id);
          }
          // hardcode community_id if missing
          if (!$community_id) {
            $community_id = 316182238720397;
          }
          // persist event into the community tenant
          $events = Events::fromKey($community_id);
          $events->add($event);
        }
      }
      
      foreach ($entry['messaging'] as $item) {
          $field = 'messages';
          $community_id = (string) array_grab($item, $mapping[$object][$field]['community']);
          $event = new Event(uuid());
          $event->setData('object', $object);
          $event->setData('id', $object_id);
          $event->setData('field', $field);
          $event->setData('verb', 'send');
          $event->setData('actor', array_grab($item, $mapping[$object][$field]['actor']));
          $event->setData('target', array_grab($item, $mapping[$object][$field]['target']));
          $event->setData('value', $item, true);
          $event->setData('timestamp', $timestamp);
          // hardcode community_id if missing
          if (!$community_id) {
            $community_id = 316182238720397;
          }
          // persist event into the community tenant
          $events = Events::fromKey($community_id);
          $events->add($event);
        }
      }
    }
  }
}
?>
<!-- var express = require("express"),
    router = express.Router(),
    config = require("../../config/config"),
    fb = require("../models/work-chat");

module.exports = function (app) {
  app.use("/", router);
};

// Workplace token verification
router.get("/webhook/", function (req, res) {
  if (req.query["hub.verify_token"] === config.verify_token) {
    res.send(req.query["hub.challenge"]);
  }
  res.send("Error, wrong token");
});

router.post("/webhook/", function (req, res) {
  let messaging_events = req.body.entry[0].messaging;

  for (let i = 0; i < messaging_events.length; i++) {
    let event = req.body.entry[0].messaging[i];
    let sender = fb.createSenderFromId(event.sender.id);

    // Handle receipt of a message
    if (event.message && event.message.text) {
      let text = event.message.text;

      fb.sendSenderAction(sender, fb.createSenderActionMarkSeen());
      // Echo the text the user sent.
      fb.sendTextMessage(sender, "Text received, echo: " + text.substring(0, 200));
    }

    // Handle receipt of a postback
    if (event.postback) {
      let text = JSON.stringify(event.postback);
      fb.sendTextMessage(sender, "Postback received: " + text.substring(0, 200));
      continue;
    }

  }
  res.sendStatus(200);

}); -->
